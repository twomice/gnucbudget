<?php

/**
 * @file
 * Module file for GnuCash Budgeting
 */

function gnucbudget_cron() {
  /* FIXME: on cron, take care of these tasks:
   * 1. import new gnucash accounts to GnuCash Account entities.
   * 2. import transactions/splits for GnuCash accounts having an Account entity.
   * 3. do "quick" balance calculation for all accounts.
   * 4. If it's time, perform account resets.
   * 5. If it's time, perform allotments.
   */
}

function gnucbudget_init() {
}

/**
 * Get a module variable value.
 * FIXME: Currently using hard-coded variables. Change to using var_get() after
 * we've provided a settings form.
 *
 * @param String $key
 *
 * @return mixed The requested variable value.
 */
function _gnucbudget_var_get($key) {
  $vars = array(
    'gnucbudget_transaction_date_min' => '2016-12-01',
  );
  
  return $vars[$key];
}

function _gnucbudget_sync_gnucash_transactions() {
  // Get all budget accounts for matching with their gnucash accounts
  $account_ids_per_guid = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'account')
    ->fieldCondition('field_type', 'value', 'budget', '=');
  $results = $query->execute();
  foreach (array_keys($results['account']) as $entity_id) {
    $account = entity_load_single('account', $entity_id);
    $gnucash_account_id = $account->field_gnucash_account[LANGUAGE_NONE][0]['target_id'];
    $gnucash_account = entity_load_single('gnucash_account', $gnucash_account_id);
    $gnucash_account_guid = $gnucash_account->field_gnucash_guid[LANGUAGE_NONE][0]['value'];
    $account_ids_per_guid[$gnucash_account_guid] = $entity_id;
  }
  // Get ID of 'Expsnse' account
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'account')
    ->fieldCondition('field_type', 'value', 'expense', '=');
  $results = $query->execute();
  $expense_account = reset($results['account']);
  $expense_account_id = $expense_account->id;

  // Get activities from gnucash database.
  // FIXME: this list will get huge over time; we should probably handle this on
  // a per-month basis, to avoid eating memory in huge arrays.
  db_set_active('gnucash');
  $query = db_select('transactions', 't');
  $query->join('splits', 's', "s.tx_guid = t.guid");
  $query->join('accounts', 'a', "s.account_guid = a.guid AND a.account_type = :type", array(':type' => 'EXPENSE'));
  $query->fields('s', array('account_guid'))
      ->fields('t', array('post_date', 'description', 'guid'))
      ->condition('t.post_date', _gnucbudget_var_get('gnucbudget_transaction_date_min'), '>=');
  $query->addExpression('round(s.value_num / s.value_denom, 2)', 'amount');
  $result = $query->execute();
  // We have to store this in an array, and then switch back to 'default' database
  // before manipulating Drupal entities based on this data.
  $rows = $result->fetchAll();
  db_set_active('default');

  // Now create transaction entities for each fetched gnucash transaction, if
  // one doesn't already exist.
  foreach($rows as $row) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'transaction')
      ->fieldCondition('field_gnucash_guid', 'value', $row->guid, '=');
    $results = $query->execute();
    if (empty($results)) {
      $entity = entity_create('transaction', array('type' => 'transaction'));
      $entity->field_gnucash_guid = array(LANGUAGE_NONE => array(0 => array('value' => $row->guid)));
      $entity->field_from = array(LANGUAGE_NONE => array(0 => array('target_id' => $account_ids_per_guid[$row->account_guid])));
      $entity->field_to = array(LANGUAGE_NONE => array(0 => array('target_id' => $expense_account_id)));
      $entity->field_description = array(LANGUAGE_NONE => array(0 => array('value' => $row->description)));
      $entity->field_post_date = array(LANGUAGE_NONE => array(0 => array('value' => $row->post_date)));
      $entity->field_amount = array(LANGUAGE_NONE => array(0 => array('value' => $row->amount)));
      $entity->save();
    }
  }
}

function _gnucbudget_sync_gnucash_accounts() {
  db_set_active('gnucash');
  $result = db_select('accounts', 'a')
    ->fields('a', array('guid', 'name'))
    ->condition('account_type', 'EXPENSE')
    ->execute();
  // We have to store this in an array, and then switch back to 'default' database
  // before manipulating Drupal entities based on this data.
  $rows = $result->fetchAll();

  // Switch back to Drupal database, and create new gnucash_account entities as
  // needed for each fetched account.
  db_set_active('default');
  foreach ($rows as $row) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'gnucash_account')
      ->fieldCondition('field_gnucash_guid', 'value', $row->guid, '=');
    $result = $query->execute();
    if (empty($result)) {
      $entity = entity_create('gnucash_account', array('type' => 'gnucash_account'));
      $entity->field_gnucash_guid = array(LANGUAGE_NONE => array(0 => array('value' => $row->guid)));
      $entity->title = $row->name;
      $entity->save();
    }
  }
}