<?php

/**
 * @file
 * Module file for GnuCash Budgeting
 */

function gnucbudget_cron() {
  // On cron, take care of these tasks:
  // 1. import new gnucash accounts to GnuCash Account entities.
  _gnucbudget_sync_gnucash_accounts();
  // 2. import transactions/splits for GnuCash accounts having an Account entity.
  _gnucbudget_sync_gnucash_transactions();
  // 3. do "quick" balance calculation for all accounts.
  _gnucbudget_balance_accounts();
}

function gnucbudget_init() {
}

function _gnucbudget_balance_accounts() {
  $account_ids = _gnucbudget_get_budget_accounts_to_guids_map();
  $post_dates = array();
  foreach ($account_ids as $account_id) {
    // For each account, find the oldest transaction which is not totaled. If
    // found, balance the account starting with that month.
    // First get the oldest not-totaled transaction where account is the 'from' account.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'transaction')
      ->fieldCondition('field_totaled', 'value', 0, '=')
      ->fieldCondition('field_from', 'target_id', $account_id, '=')
      ->fieldOrderBy('field_post_date', 'value', 'ASC');
    $results = $query->execute();
    if (!empty($results['transaction'])) {
      $transaction_result = reset($results['transaction']);
      $transaction_id = $transaction_result->id;
      $transactions = entity_load('transaction', array($transaction_id));
      $transaction = $transactions[$transaction_id];
      $items = field_get_items('transaction', $transaction, 'field_post_date');
      $post_dates[] = strtotime($items[0]['value']);
    }

    // Next get the oldest not-totaled transaction where account is the 'to' account.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'transaction')
      ->fieldCondition('field_totaled', 'value', 0, '=')
      ->fieldCondition('field_to', 'target_id', $account_id, '=')
      ->fieldOrderBy('field_post_date', 'value', 'ASC');
    $results = $query->execute();
    if (!empty($results['transaction'])) {
      $transaction_result = reset($results['transaction']);
      $transaction_id = $transaction_result->id;
      $transactions = entity_load('transaction', array($transaction_id));
      $transaction = $transactions[$transaction_id];
      $items = field_get_items('transaction', $transaction, 'field_post_date');
      $post_dates[] = strtotime($items[0]['value']);
    }
    // If there are any not-is_totaled transactions, re-balance this account
    // starting with the month of the oldest of those transactions.
    if (!empty($post_dates)) {
      $oldest_post_month = date('Y-m', min($post_dates));
      _gnucbudget_balance_account($account_id, $oldest_post_month);
    }
    // If the aren't any not-is_totaled transactions, re-balance this account
    // for the current month.
    else {
      _gnucbudget_balance_account($account_id);
    }
  }
}

/**
 * Calculate the ending balance for a given account in all months up to the
 * current month, begining with a given month.
 * - If no month is given, or if $month is greater than current month, assume
 *   current month.
 * - If no balance record exists for the account in the month:
 *    - Set $month to the oldest month between $month and 'gnucbudget_balance_month_min'
 *      for which no balance record exists (this may be the current month or
 *      gnucbudget_balance_month_min).
 *    - If a balance record DOES NOT exist for the account in the immediately
 *      previous month, create a new balance record for the given month, with
 *      starting balance of 0.
 *    - Otherwise, perform account reset and allotment based on the previous
 *      month's ending balance, and create a balance record for the month with the
 *      appropriate starting balance (based on reset and allotments)
 * - From the month's starting balance, subtract all transactions for the account
 *   in the month, writing this difference to the ending balance.
 * - Mark all transactions for the account in the month as totalled.
 * - Delete any existing balance records for months following the given month.
 * - If $month is older than current month, call this function again for the
 *   subsequent month.
 *
 * @param Int $account_id Entity ID for an Account entity.
 * @param String $month A month in the form of 'YYYY-MM'; balancing will start
 *          from this month and continue to the current month.
 *
 * @return Boolean TRUE if all went well, otherwise FALSE.
 */
function _gnucbudget_balance_account($account_id, $month = '') {
  $orig_month = $month;
  // If no month is given, or if $month is greater than current month, assume
  // current month.
  if (empty($month) || strtotime($month) > time()) {
    $month = date("Y-m");
  }
  $gnucbudget_balance_month_min = _gnucbudget_var_get('gnucbudget_balance_month_min');
  // If month is older than gnucbudget_balance_month_min, assume gnucbudget_balance_month_min
  if (strtotime($month) < strtotime($gnucbudget_balance_month_min)) {
    $month = $gnucbudget_balance_month_min;
  }

  // Find a balance record for account/month
  $month_balance = _gnucbudget_get_latest_balance($account_id, $month);
  if (is_null($month_balance)) {
    // No balance record exists for this month and account.
    // Find balance record for most recent previous month, if any, as far back
    // as $gnucbudget_balance_month_min.
    $previous_balance = _gnucbudget_get_latest_balance($account_id, $month, $gnucbudget_balance_month_min);
    if (is_object($previous_balance)) {
      // We've a most recent balance record. Find out what month it's for.
      $items = field_get_items('balance', $previous_balance, 'field_month');
      $previous_balance_month = date('Y-m', strtotime($items[0]['value']));
      $items = field_get_items('balance', $previous_balance, 'field_ending_balance');
      $previous_balance_ending = $items[0]['value'];

      // Create the next month's balance record.
      $month = date('Y-m', strtotime("$previous_balance_month +1 month"));
      $entity = entity_create('balance', array('type' => 'balance'));
      $entity->field_month = array(LANGUAGE_NONE => array(0 => array('value' => "{$month}-01")));
      $entity->field_account = array(LANGUAGE_NONE => array(0 => array('target_id' => $account_id)));
      $entity->field_starting_balance = array(LANGUAGE_NONE => array(0 => array('value' => $previous_balance_ending)));
      $entity->save();
    }
    else {
      // There is no balance record for this account, ever. Create one for
      // $gnucbudget_balance_month_min
      $month = $gnucbudget_balance_month_min;
      $entity = entity_create('balance', array('type' => 'balance'));
      $entity->field_month = array(LANGUAGE_NONE => array(0 => array('value' => "{$month}-01")));
      $entity->field_account = array(LANGUAGE_NONE => array(0 => array('target_id' => $account_id)));
      $entity->field_starting_balance = array(LANGUAGE_NONE => array(0 => array('value' => 0)));
      $entity->field_ending_balance = array(LANGUAGE_NONE => array(0 => array('value' => 0)));
      $entity->save();
    }
  }
  // Now we know this account has a balance record for this month. Use that record.
  $balance = _gnucbudget_get_latest_balance($account_id, $month);
  $items = field_get_items('balance', $balance, 'field_starting_balance');
  $starting_balance = $items[0]['value'];

  
  // Now we know which balance record to use. Apply resets and allotments for
  // this account/month, if none exist already.
  _gnucbudget_do_reset_and_allot($account_id, $month);

  // Total all transactions into this account (where this account is "to").
  $total_in = _gnucbudget_sum_account_month($account_id, 'to', $month);
  // Total all transactions out of this account (where this account "from").
  $total_out = _gnucbudget_sum_account_month($account_id, 'from', $month);
  // Add to starting balance and set ending balance.
  $ending_balance = ($starting_balance + $total_in - $total_out);

  $balance->field_ending_balance = array(LANGUAGE_NONE => array(0 => array('value' => $ending_balance)));
  $balance->save();
  
  // Mark all transactions as "totaled" in this month/account.
  _gnucbudget_mark_totaled($account_id, $month);

  // If this is a month in the past, clear certain data from all following months,
  // and calculate balance for the next month.
  if (strtotime($month) < strtotime(date('Y-m'))) {
    $next_month = date('Y-m', strtotime("$month +1 month"));
    _gnucbudget_clear_account_future($account_id, $next_month, TRUE);
    _gnucbudget_balance_account($account_id, $next_month);
  }
}

/**
 * For a given month and account, mark all transactions as 'totaled'.
 * 
 * @param <type> $account_id
 * @param <type> $month
 */
function _gnucbudget_mark_totaled($account_id, $month) {
  $entities = array();
  // Get transaction where month=$month and from=$account_id.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'transaction')
    ->fieldCondition('field_post_date', 'value', "{$month}-01", '>=')
    ->fieldCondition('field_totaled', 'value', 0, '=')
    ->fieldCondition('field_from', 'target_id', $account_id, '=');
  $result = $query->execute();
  if (!empty($result['transaction'])) {
    $entities = array_merge($entities, entity_load('transaction', array_keys($result['transaction'])));
  }

  // Get transaction where month=$month and to=$account_id.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'transaction')
    ->fieldCondition('field_post_date', 'value', "{$month}-01", '>=')
    ->fieldCondition('field_totaled', 'value', 0, '=')
    ->fieldCondition('field_to', 'target_id', $account_id, '=');
  $result = $query->execute();
  if (!empty($result['transaction'])) {
    $entities = array_merge($entities, entity_load('transaction', array_keys($result['transaction'])));
  }

  foreach ($entities as $entity) {
    $entity->field_totaled = array(LANGUAGE_NONE => array(0 => array('value' => 1)));
    $entity->save();
  }
}

/**
 * For a given account and month, delete and re-peform all reset and allotment
 * transactions.
 *
 * @param String $account_id
 * @param String $month A month in the form of 'YYYY-MM'
 */
function _gnucbudget_do_reset_and_allot($account_id, $month) {
  // First clear all reset and allotment transactions for this and future months.
  _gnucbudget_clear_account_future($account_id, $month, FALSE);

  // Create reset transactions.
  $accounts = entity_load('account', array($account_id));
  $account = $accounts[$account_id];
  $items = field_get_items('account', $account, 'field_allotment');
  $allotment = floatval($items[0]['value']);
  $items = field_get_items('account', $account, 'field_reset_frequency_months');
  $reset_frequency_months = $items[0]['value'];
  $items = field_get_items('account', $account, 'field_allot_from');
  $alloting_account_id = $items[0]['target_id'];

  $balance = _gnucbudget_get_latest_balance($account_id, $month);
  $items = field_get_items('balance', $balance, 'field_starting_balance');
  $starting_balance = $items[0]['value'];
  if ($reset_frequency_months == 1) {
    // First, move any excess balance into General.
    $zero_amount = ($starting_balance > 0 ? $starting_balance : 0);
    $entity = entity_create('transaction', array('type' => 'transaction'));
    $entity->field_from = array(LANGUAGE_NONE => array(0 => array('target_id' => $account_id)));
    $entity->field_to = array(LANGUAGE_NONE => array(0 => array('target_id' => $alloting_account_id)));
    $entity->field_post_date = array(LANGUAGE_NONE => array(0 => array('value' => "{$month}-01")));
    $entity->field_amount = array(LANGUAGE_NONE => array(0 => array('value' => $zero_amount)));
    $entity->field_transaction_type = array(LANGUAGE_NONE => array(0 => array('value' => 'reset')));
    $entity->save();

    // Credit any "reset" amount into the budget account.
    $items = field_get_items('account', $account, 'field_reset_factor');
    $reset_factor = floatval($items[0]['value']);
    $reset_max_amount = ($reset_factor * $allotment);
    $reset_amount = min(array($starting_balance, $reset_max_amount));
    if ($reset_amount) {
      $entity = entity_create('transaction', array('type' => 'transaction'));
      $entity->field_from = array(LANGUAGE_NONE => array(0 => array('target_id' => $alloting_account_id)));
      $entity->field_to = array(LANGUAGE_NONE => array(0 => array('target_id' => $account_id)));
      $entity->field_post_date = array(LANGUAGE_NONE => array(0 => array('value' => "{$month}-01")));
      $entity->field_amount = array(LANGUAGE_NONE => array(0 => array('value' => $reset_amount)));
      $entity->field_transaction_type = array(LANGUAGE_NONE => array(0 => array('value' => 'reset')));
      $entity->save();
    }
  }
  // Create allotment transaction.
  $entity = entity_create('transaction', array('type' => 'transaction'));
  $entity->field_from = array(LANGUAGE_NONE => array(0 => array('target_id' => $alloting_account_id)));
  $entity->field_to = array(LANGUAGE_NONE => array(0 => array('target_id' => $account_id)));
  $entity->field_post_date = array(LANGUAGE_NONE => array(0 => array('value' => "{$month}-01")));
  $entity->field_amount = array(LANGUAGE_NONE => array(0 => array('value' => $allotment)));
  $entity->field_transaction_type = array(LANGUAGE_NONE => array(0 => array('value' => 'allotment')));
  $entity->save();
}

function _gnucbudget_sum_account_month($account_id, $position, $month) {
  // Use db_select to get sum for a subset of transactions. I wish I didn't
  // have to do it this way, but the alternative (doing it with EntityFieldQuery)
  // would mean doing sums in php, which I expect will slow down the whole
  // process; much more efficient per-call to do the sums in SQL. Sure, it's
  // technically "not the drupal way", but I'm making the trade-off of code-
  // maintainability on fairly stable code for performance on a frequently
  // called function.
  $query = db_select('field_data_field_amount', 'a');
  $query->join('field_data_field_post_date', 'p', 'p.entity_type = a.entity_type and p.entity_id = a.entity_id');
  $query->condition('a.language', 'und');
  $query->condition('p.language', 'und');
  $query->condition('pos.language', 'und');
  $query->where("date_format(p.field_post_date_value, '%Y-%m') = :month", array(':month' => $month));
  $query->addExpression('ifnull(sum(field_amount_value), 0)', 'total');

  switch ($position) {
    case 'to':
      $query->join('field_revision_field_to', 'pos', 'pos.entity_type = a.entity_type and pos.entity_id = a.entity_id');
      $query->condition('pos.field_to_target_id', $account_id);
      break;
    case 'from':
      $query->join('field_revision_field_from', 'pos', 'pos.entity_type = a.entity_type and pos.entity_id = a.entity_id');
      $query->condition('pos.field_from_target_id', $account_id);
      break;
  }
  $result = $query->execute();
  $row = $result->fetchAssoc();
  return $row['total'];
}

/**
 * For a given account and month, and all following months, delete all reset
 * and allotment transactions, and all balance records.
 *
 * @param String $account_id The ID of the account entity to clear
 * @param String $month A month in the form of 'YYYY-MM'; all balances, reset
 *          transactions, and allotment transactions in this month and following
 *          months will be deleted.
 * @param Boolean $clear_balances Only remove balance records if this is TRUE
 *          (default=TRUE).
 */
function _gnucbudget_clear_account_future($account_id, $month, $clear_balances = TRUE) {
  // Remove for FROM account.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'transaction')
    ->fieldCondition('field_from', 'target_id', $account_id, '=')
    ->fieldCondition('field_post_date', 'value', "{$month}-01", '>=')
    ->fieldCondition('field_transaction_type', 'value', array('reset', 'allotment'), 'IN');
  $results = $query->execute();
  if (!empty($results['transaction'])) {
    entity_delete_multiple('transaction', array_keys($results['transaction']));
  }
  // Remove for TO account.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'transaction')
    ->fieldCondition('field_to', 'target_id', $account_id, '=')
    ->fieldCondition('field_post_date', 'value', "{$month}-01", '>=')
    ->fieldCondition('field_transaction_type', 'value', array('reset', 'allotment'), 'IN');
  $results = $query->execute();
  if (!empty($results['transaction'])) {
    entity_delete_multiple('transaction', array_keys($results['transaction']));
  }
  if ($clear_balances) {
    // Remove balance records.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'balance')
      ->fieldCondition('field_account', 'target_id', $account_id, '=')
      ->fieldCondition('field_month', 'value', "{$month}-01", '>=');
    $results = $query->execute();
    if (!empty($results['balance'])) {
      entity_delete_multiple('balance', array_keys($results['balance']));
    }
  }
}

/**
 * For a given account and month, get the balance entity object for the previous
 * month's balance.
 *
 * @param Int $account_id Entity ID for an Account entity.
 * @param String $max_month A month in the form of 'YYYY-MM'; newest month that
 *        may be returned.
 * @param Boolean $min_month Oldest month which may be returned, if NULL,
 *        "$max_month" is assumed.
 *
 * @return Balance entity if one is found, otherwise NULL.
 */
function _gnucbudget_get_latest_balance($account_id, $max_month, $min_month = NULL) {
  if (is_null($min_month)) {
    $min_month = $max_month;
  }
  $previous_balance = NULL;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'balance')
    ->fieldCondition('field_month', 'value', array("{$min_month}-01", "{$max_month}-01"), 'BETWEEN')
    ->fieldCondition('field_account', 'target_id', $account_id)
    ->fieldOrderBy('field_month', 'value', 'DESC');
  $results = $query->execute();
  if (!empty($results['balance'])) {
    $previous_balance_result = reset($results['balance']);
    $previous_balance_id = $previous_balance_result->id;
    $previous_balances = entity_load('balance', array($previous_balance_id));
    $previous_balance = $previous_balances[$previous_balance_id];
  }
  return $previous_balance;
}

/**
 * Get a module variable value.
 * FIXME: Currently using hard-coded variables. Change to using var_get() after
 * we've provided a settings form.
 *
 * @param String $key
 *
 * @return mixed The requested variable value.
 */
function _gnucbudget_var_get($key) {
  $vars = array(
    'gnucbudget_balance_month_min' => '2017-01',
    'gnucbudget_transaction_date_min' => '2016-17-01',
    'gnucbudget_transaction_history_months_max' => '6',
  );
  
  return $vars[$key];
}

function _gnucbudget_get_budget_accounts_to_guids_map() {
  static $accounts_to_guids_map;
  if (!isset($accounts_to_guids_map)) {
    $accounts_to_guids_map = array();
    $view_object = views_get_view('gnucbudget_budget_accounts_to_guids_map');
    $view_object->set_display("default");
    $view_object->pre_execute();
    $view_object->execute();
    $results = $view_object->result;
    foreach ($results as $result) {
      $accounts_to_guids_map[$result->field_field_gnucash_guid[0]['raw']['value']] = $result->id;
    }
  }
  return $accounts_to_guids_map;
}

function _guncbudget_get_system_account_id($type) {
  static $expense_account_id;
  if (!isset($expense_account_id)) {
    // Get ID of 'Expense' account
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'account')
      ->fieldCondition('field_type', 'value', $type, '=');
    $results = $query->execute();
    $expense_account = reset($results['account']);
    $expense_account_id = $expense_account->id;
  }
  return $expense_account_id;
}

function _gnucbudget_sync_gnucash_transactions() {
  // Get activities from gnucash database.
  for ($months_ago = _gnucbudget_var_get('gnucbudget_transaction_history_months_max'); $months_ago >= 0; $months_ago--) {
    $month = date("Y-m", strtotime("-$months_ago month"));
    _gnucbudget_sync_gnucash_transactions_month($month);
  }

}

function _gnucbudget_sync_gnucash_transactions_month($month) {
  db_set_active('gnucash');
  $query = db_select('transactions', 't');
  $query->join('splits', 's', "s.tx_guid = t.guid");
  $query->join('accounts', 'a', "s.account_guid = a.guid AND a.account_type = :type", array(':type' => 'EXPENSE'));
  $query->fields('s', array('account_guid'))
      ->fields('t', array('post_date', 'description', 'guid'))
      ->condition('t.post_date', _gnucbudget_var_get('gnucbudget_transaction_date_min'), '>=');
  $query->where("date_format(t.post_date, '%Y-%m') = :month", array(':month' => $month));
  $query->addExpression('round(s.value_num / s.value_denom, 2)', 'amount');
  $result = $query->execute();

  // We have to store this in an array, and then switch back to 'default' database
  // before manipulating Drupal entities based on this data.
  $rows = $result->fetchAll();
  db_set_active('default');

  if (!empty($rows)) {
    $accounts_to_guids_map = _gnucbudget_get_budget_accounts_to_guids_map();
    $expense_account_id = _guncbudget_get_system_account_id('expense');

    // Now create transaction entities for each fetched gnucash transaction, if
    // one doesn't already exist.
    $existing_guids = array();
    foreach($rows as $row) {
      if (empty($accounts_to_guids_map[$row->account_guid])) {
        // Skip this row if the gnucash account is not mapped to one of our accounts.
        continue;
      }

      $existing_guids[] = $row->guid;
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'transaction')
        ->fieldCondition('field_gnucash_guid', 'value', $row->guid, '=');
      $results = $query->execute();
      if (empty($results)) {
        $entity = entity_create('transaction', array('type' => 'transaction'));
        $entity->field_gnucash_guid = array(LANGUAGE_NONE => array(0 => array('value' => $row->guid)));
        $entity->field_from = array(LANGUAGE_NONE => array(0 => array('target_id' => $accounts_to_guids_map[$row->account_guid])));
        $entity->field_to = array(LANGUAGE_NONE => array(0 => array('target_id' => $expense_account_id)));
        $entity->field_description = array(LANGUAGE_NONE => array(0 => array('value' => $row->description)));
        $entity->field_post_date = array(LANGUAGE_NONE => array(0 => array('value' => $row->post_date)));
        $entity->field_amount = array(LANGUAGE_NONE => array(0 => array('value' => $row->amount)));
        $entity->field_transaction_type = array(LANGUAGE_NONE => array(0 => array('value' => 'gnucash')));
        $entity->save();
      }
    }
    // Remove any Transaction entity records that don't exist in gnucash.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'transaction')
      ->fieldCondition('field_gnucash_guid', 'value', $existing_guids, 'NOT IN');
    $results = $query->execute();
    if (!empty($results['transaction'])) {
      entity_delete_multiple('transaction', array_keys($results['transaction']));
    }
    // FiXME: For any transactions that are deleted, we need to mark that month
    // as needing recalculation. So maybe mark all transactions in that month
    // as not-is_totaled?
  }
}

function _gnucbudget_sync_gnucash_accounts() {
  db_set_active('gnucash');
  $result = db_select('accounts', 'a')
    ->fields('a', array('guid', 'name'))
    ->condition('account_type', 'EXPENSE')
    ->execute();
  // We have to store this in an array, and then switch back to 'default' database
  // before manipulating Drupal entities based on this data.
  $rows = $result->fetchAll();

  // Switch back to Drupal database, and create new gnucash_account entities as
  // needed for each fetched account.
  db_set_active('default');
  foreach ($rows as $row) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'gnucash_account')
      ->fieldCondition('field_gnucash_guid', 'value', $row->guid, '=');
    $result = $query->execute();
    if (empty($result)) {
      $entity = entity_create('gnucash_account', array('type' => 'gnucash_account'));
      $entity->field_gnucash_guid = array(LANGUAGE_NONE => array(0 => array('value' => $row->guid)));
      $entity->title = $row->name;
      $entity->save();
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function gnucbudget_theme_registry_alter(&$theme_registry) {
	// Defined path to the current module.
	$module_path = drupal_get_path('module', 'gnucbudget');
	// Find all .tpl.php files in this module's folder recursively.
	$template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
	// Iterate through all found template file objects.
	foreach ($template_file_objects as $key => $template_file_object) {
		// If the template has not already been overridden by a theme.
		if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
			// Alter the theme path and template elements.
			$theme_registry[$key]['theme path'] = $module_path;
			$theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
			$theme_registry[$key]['type'] = 'module';
		}
	}
}