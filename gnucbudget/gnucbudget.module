<?php

/**
 * @file
 * Module file for GnuCash Budgeting
 */

function gnucbudget_cron() {
  // On cron, take care of these tasks:
  // 1. import new gnucash accounts to GnuCash Account entities.
  _gnucbudget_sync_gnucash_accounts();
  // 2. import transactions/splits for GnuCash accounts having an Account entity.
  _gnucbudget_sync_gnucash_transactions();
  // 3. do "quick" balance calculation for all accounts.
  _gnucbudget_balance_accounts();
  // 4. If it's time, perform account resets.
  _gnucbudget_reset_accounts();
  // 5. If it's time, perform allotments.
  _gnucbudget_allot_accounts();
}

function gnucbudget_init() {
}

function _gnucbudget_balance_accounts() {
  $account_ids = _gnucbudget_get_budget_accounts_to_guids_map();
  foreach ($account_ids as $account_id) {
    _gnucbudget_balance_account($account_id);
  }
  dsm('FIXME: '. __FUNCTION__ . ' not complete.');
}

function _gnucbudget_balance_account($account_id) {
  // NEXT TODO: create basic english rules for balancing an account.
  dsm('FIXME: '. __FUNCTION__ . ' not complete.');
}


function _gnucbudget_reset_accounts() {
  dsm('FIXME: '. __FUNCTION__ . ' not complete.');
}

function _gnucbudget_allot_accounts() {
  dsm('FIXME: '. __FUNCTION__ . ' not complete.');
}


/**
 * Get a module variable value.
 * FIXME: Currently using hard-coded variables. Change to using var_get() after
 * we've provided a settings form.
 *
 * @param String $key
 *
 * @return mixed The requested variable value.
 */
function _gnucbudget_var_get($key) {
  $vars = array(
    'gnucbudget_transaction_date_min' => '2016-12-01',
    'gnucbudget_transaction_history_months_max' => '6',
  );
  
  return $vars[$key];
}

function _gnucbudget_get_budget_accounts_to_guids_map() {
  static $accounts_to_guids_map;
  if (!isset($accounts_to_guids_map)) {
    $accounts_to_guids_map = array();
    $view_object = views_get_view('gnucbudget_budget_accounts_to_guids_map');
    $view_object->set_display("default");
    $view_object->pre_execute();
    $view_object->execute();
    $results = $view_object->result;
    foreach ($results as $result) {
      $accounts_to_guids_map[$result->field_field_gnucash_guid[0]['raw']['value']] = $result->id;
    }
  }
  return $accounts_to_guids_map;
}

function _guncbudget_get_expense_account_id() {
  static $expense_account_id;
  if (!isset($expense_account_id)) {
    // Get ID of 'Expense' account
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'account')
      ->fieldCondition('field_type', 'value', 'expense', '=');
    $results = $query->execute();
    $expense_account = reset($results['account']);
    $expense_account_id = $expense_account->id;
  }
  return $expense_account_id;
}

function _gnucbudget_sync_gnucash_transactions() {
  // Get activities from gnucash database.
  for ($months_ago = _gnucbudget_var_get('gnucbudget_transaction_history_months_max'); $months_ago >= 0; $months_ago--) {
    $month = date("Y-m", strtotime("-$months_ago month"));
    _gnucbudget_sync_gnucash_transactions_month($month);
  }

}

function _gnucbudget_sync_gnucash_transactions_month($month) {
  db_set_active('gnucash');
  $query = db_select('transactions', 't');
  $query->join('splits', 's', "s.tx_guid = t.guid");
  $query->join('accounts', 'a', "s.account_guid = a.guid AND a.account_type = :type", array(':type' => 'EXPENSE'));
  $query->fields('s', array('account_guid'))
      ->fields('t', array('post_date', 'description', 'guid'))
      ->condition('t.post_date', _gnucbudget_var_get('gnucbudget_transaction_date_min'), '>=');
  $query->where("date_format(t.post_date, '%Y-%m') = :month", array(':month' => $month));
  $query->addExpression('round(s.value_num / s.value_denom, 2)', 'amount');
  $result = $query->execute();

  // We have to store this in an array, and then switch back to 'default' database
  // before manipulating Drupal entities based on this data.
  $rows = $result->fetchAll();
  db_set_active('default');

  if (!empty($rows)) {
    $accounts_to_guids_map = _gnucbudget_get_budget_accounts_to_guids_map();
    $expense_account_id = _guncbudget_get_expense_account_id();

    // Now create transaction entities for each fetched gnucash transaction, if
    // one doesn't already exist.
    foreach($rows as $row) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'transaction')
        ->fieldCondition('field_gnucash_guid', 'value', $row->guid, '=');
      $results = $query->execute();
      if (empty($results)) {
        $entity = entity_create('transaction', array('type' => 'transaction'));
        $entity->field_gnucash_guid = array(LANGUAGE_NONE => array(0 => array('value' => $row->guid)));
        $entity->field_from = array(LANGUAGE_NONE => array(0 => array('target_id' => $accounts_to_guids_map[$row->account_guid])));
        $entity->field_to = array(LANGUAGE_NONE => array(0 => array('target_id' => $expense_account_id)));
        $entity->field_description = array(LANGUAGE_NONE => array(0 => array('value' => $row->description)));
        $entity->field_post_date = array(LANGUAGE_NONE => array(0 => array('value' => $row->post_date)));
        $entity->field_amount = array(LANGUAGE_NONE => array(0 => array('value' => $row->amount)));
        $entity->save();
      }
    }
  }
}

function _gnucbudget_sync_gnucash_accounts() {
  db_set_active('gnucash');
  $result = db_select('accounts', 'a')
    ->fields('a', array('guid', 'name'))
    ->condition('account_type', 'EXPENSE')
    ->execute();
  // We have to store this in an array, and then switch back to 'default' database
  // before manipulating Drupal entities based on this data.
  $rows = $result->fetchAll();

  // Switch back to Drupal database, and create new gnucash_account entities as
  // needed for each fetched account.
  db_set_active('default');
  foreach ($rows as $row) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'gnucash_account')
      ->fieldCondition('field_gnucash_guid', 'value', $row->guid, '=');
    $result = $query->execute();
    if (empty($result)) {
      $entity = entity_create('gnucash_account', array('type' => 'gnucash_account'));
      $entity->field_gnucash_guid = array(LANGUAGE_NONE => array(0 => array('value' => $row->guid)));
      $entity->title = $row->name;
      $entity->save();
    }
  }
}